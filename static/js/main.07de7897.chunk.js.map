{"version":3,"sources":["Wrapper.js","Navbar.js","Jumbotron.js","CharacterCard.js","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","props","className","children","Navbar","currentScore","highScore","Jumbotron","App","state","characters","Clicked","handleClick","id","shuffleArray","handleScore","console","log","timesClicked","forEach","element","clicked","setState","handleIncrement","shuffledArr","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","map","character","CharacterCard","name","image","occupation","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07de7897.chunk.js","sourcesContent":["import React from \"react\";\n \nfunction Wrapper(props){\n    return <div className=\"wrapper\">{props.children}</div>\n}\n \nexport default Wrapper;","import React from \"react\";\n \nfunction Navbar(props) {\n    return (\n        <header className=\"container-fluid fixed-top\" >\n            <div className=\"row\">\n                <h1 className=\"col-sm-8\">Celebrity Memory Game</h1>\n                <nav className=\"col-sm-4\">\n                    <p>Score: <span>{props.currentScore}</span></p>\n                    <p>Top Score: <span>{props.highScore}</span> </p>\n                    {props.children}\n                </nav>\n            </div>\n        </header>        \n    )\n}\n \nexport default Navbar;","import React from \"react\";\n \nfunction Jumbotron(props) {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">{props.children}\n        <p className=\"lead\">Get points by clicking on an image but don't click on any more than once!</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Jumbotron;","import React, { Component } from \"react\";\nimport CharacterCard from \"./CharacterCard\";\nimport Wrapper from \"./Wrapper\";\nimport Navbar from \"./Navbar\";\nimport Jumbotron from \"./Jumbotron\";\nimport characters from \"./characters.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    characters,\n    highScore: 0,\n    currentScore: 0,\n    Clicked: false\n  };\n\n  handleClick = id => {\n    this.shuffleArray();\n    this.handleScore(id);\n    console.log(this.state.timesClicked);\n  };\n\n  handleScore = id => {\n    this.state.characters.forEach(element => {\n      if (id === element.id && element.clicked === false) {\n        element.clicked = true;\n        this.setState({ Clicked: false });\n        this.handleIncrement();\n      } else if (id === element.id && element.clicked === true) {\n        if (this.state.currentScore > this.state.highScore) {\n          this.setState({ highScore: this.state.currentScore });\n        }\n        this.setState({ currentScore: 0 });\n        this.setState({ Clicked: true });\n        this.state.characters.forEach(element => (element.clicked = false));\n        console.log(this.state.characters);\n      }\n    });\n  };\n\n  shuffleArray = () => {\n    // Shuffle array of objects\n    const shuffledArr = this.shuffle(this.state.characters);\n    // Setting 'shuffledArr' as the new state\n    this.setState({ shuffledArr });\n  };\n\n  // handleIncrement increments this.state.currentScore by 1\n  handleIncrement = () => {\n    // Using setState method to update component's state\n    this.setState({ currentScore: this.state.currentScore + 1 });\n  };\n\n  // Function that takes an array as a parameter and shuffles it\n  shuffle = array => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          currentScore={this.state.currentScore}\n          highScore={this.state.highScore}\n        />\n        <Jumbotron />\n        {this.state.characters.map(character => (\n          <CharacterCard\n            Clicked={this.state.Clicked}\n            handleClick={this.handleClick}\n            id={character.id}\n            key={character.id}\n            name={character.name}\n            image={character.image}\n            occupation={character.occupation}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from \"react\";\nimport CharacterCard from \"./CharacterCard\";\nimport Wrapper from \"./Wrapper\";\nimport Navbar from \"./Navbar\";\nimport Jumbotron from \"./Jumbotron\";\nimport characters from \"./characters.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    characters,\n    highScore: 0,\n    currentScore: 0,\n    Clicked: false\n  };\n\n  handleClick = id => {\n    this.shuffleArray();\n    this.handleScore(id);\n    console.log(this.state.timesClicked);\n  };\n\n  handleScore = id => {\n    this.state.characters.forEach(element => {\n      if (id === element.id && element.clicked === false) {\n        element.clicked = true;\n        this.setState({ Clicked: false });\n        this.handleIncrement();\n      } else if (id === element.id && element.clicked === true) {\n        if (this.state.currentScore > this.state.highScore) {\n          this.setState({ highScore: this.state.currentScore });\n        }\n        this.setState({ currentScore: 0 });\n        this.setState({ Clicked: true });\n        this.state.characters.forEach(element => (element.clicked = false));\n        console.log(this.state.characters);\n      }\n    });\n  };\n\n  shuffleArray = () => {\n    // Shuffle array of objects\n    const shuffledArr = this.shuffle(this.state.characters);\n    // Setting 'shuffledArr' as the new state\n    this.setState({ shuffledArr });\n  };\n\n  // handleIncrement increments this.state.currentScore by 1\n  handleIncrement = () => {\n    // Using setState method to update component's state\n    this.setState({ currentScore: this.state.currentScore + 1 });\n  };\n\n  // Function that takes an array as a parameter and shuffles it\n  shuffle = array => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          currentScore={this.state.currentScore}\n          highScore={this.state.highScore}\n        />\n        <Jumbotron />\n        {this.state.characters.map(character => (\n          <CharacterCard\n            Clicked={this.state.Clicked}\n            handleClick={this.handleClick}\n            id={character.id}\n            key={character.id}\n            name={character.name}\n            image={character.image}\n            occupation={character.occupation}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}